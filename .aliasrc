#!/bin/bash
setopt +o nomatch

set-title() {
  if [ -n "$TMUX" ]; then
    # Note: Options without parameter were hardcoded,
    # in order to distinguish an option's parameter from the destination.
    #
    #                   s/[[:space:]]*\(\( | spaces before options
    #     \(-[46AaCfGgKkMNnqsTtVvXxYy]\)\| | option without parameter
    #                     \(-[^[:space:]]* | option
    # \([[:space:]]\+[^[:space:]]*\)\?\)\) | parameter
    #                      [[:space:]]*\)* | spaces between options
    #                        [[:space:]]\+ | spaces before destination
    #                \([^-][^[:space:]]*\) | destination
    #                                   .* | command
    #                                 /\6/ | replace with destination
    tmux rename-window "$(echo "$@" |
      sed 's/[[:space:]]*\(\(\(-[46AaCfGgKkMNnqsTtVvXxYy]\)\|\(-[^[:space:]]*\([[:space:]]\+[^[:space:]]*\)\?\)\)[[:space:]]*\)*[[:space:]]\+\([^-][^[:space:]]*\).*/\6/')"
  else
    echo -e "\e]0;$*\007"
  fi
}

unset-title() {
  if [ -n "$TMUX" ]; then
    tmux set-window-option automatic-rename "on" 1>/dev/null
  else
    echo -e "$HOST"
  fi
}

ssh() {
  set-title "$@"
  command ssh -2 "$@"
  unset-title
}

nvim-qt() {
  if [ "$#" -eq 1 ] && [ -f "$1" ] && [ ! -w "$1" ]; then
    echo "Editing readonly file..."
    sudo /usr/bin/nvim-qt "$@"
  else
    /usr/bin/nvim-qt "$@"
  fi
}

alias nq='nvim-qt'

nvim() {
  if [ "$#" -eq 1 ] && [ -f "$1" ] && [ ! -w "$1" ]; then
    echo "Editing readonly file..."
    sudo -e "$@"
  else
    if [ -x "${HOMEBREW_PREFIX}/bin/nvim" ]; then
      "${HOMEBREW_PREFIX}/bin/nvim" "$@"
    elif [ -x /usr/bin/nvim ]; then
      /usr/bin/nvim "$@"
    fi
  fi
}

alias n='nvim'

vim() {
  if [ "$#" -eq 1 ] && [ -f "$1" ] && [ ! -w "$1" ]; then
    echo "Editing readonly file..."
    sudo -e "$@"
  else
    /usr/bin/vim "$@"
  fi
}

alias pbk="/home/sam/.local/bin/buildctl --addr podman-container://buildkitd"

global-find() {
  sudo fd -E "timeshift" -E "overlay" \
    -E "usr/share/man/*" \
    -E "var/lib/docker/*" \
    -E "mnt/MEDIA/*" \
    "$@" /
}

# Helpful aliases
[ -z "${INSTALL_RUSTCLIS}" ] || setup_rust_clis

# shellcheck disable=SC1090,SC1091
alias src-aliases='source ~/.aliasrc'

# secrets
alias reload-keys="keychain --eval --noask --agents ssh --inherit any"
alias gpgkey="keychain -Q --eval --noask --agents gpg DDF971A840632EDD95A23F27472AF341233F3527"
alias sshkey="keychain -Q --eval --noask --agents ssh id_rsa"
alias frigga="docker run --rm -it unfor19/frigga"

pip3-upgrade() {
  python3 -m pip install -U pip
  # shellcheck disable=SC2046
  python3 -m pip install -U \
    $(python3 -m pip list --format json |
      jq '.[].name' -r |
      grep -v PyGObject |
      grep -v Shredder |
      tr '\n' ' ' |
      sed 's/\s$//') |
    grep -v "Requirement already satisfied"
}
alias nvim-plugins='nvim +PackerSync +PackerUpdate +qall'

brew-upgrade() {
  brew update
  brew upgrade
  brew cleanup
}

#shellcheck disable=SC2046
update-all-the-things() {
  prog_exists paru &&
    echo "---------------------------" &&
    echo "=====| Update pkgmgr |=====" &&
    #sudo pacman -Sy && sudo powerpill -Su && paru -Su --skipreview
    sudo echo -n "sudo" && paru -Syu --skipreview --batchinstall --sudoloop --removemake

  prog_exists paru || (prog_exists pacman && prog_exists pacman && prog_exists pacman &&
    echo "---------------------------" &&
    echo "=====| Update pkgmgr |=====" &&
    sudo pacman -Sy && sudo powerpill -Su && paru -Su --skipreview)

  prog_exists apt-get &&
    echo "---------------------------" &&
    echo "=====| Update pkgmgr |=====" &&
    sudo apt-get update && sudo apt-get upgrade

  prog_exists flatpak &&
    echo "---------------------------" &&
    echo "=====| Update flatpak |====" &&
    sudo flatpak update -y

  prog_exists brew &&
    echo "---------------------------" &&
    echo "=====| Update brew |=======" &&
    brew-upgrade

  prog_exists pipx &&
    echo "---------------------------" &&
    echo "=====| Update pipx |=======" &&
    # python3 -m pip install --user -U pipx &&
    pipx upgrade-all

  prog_exists cargo-install-update &&
    echo "---------------------------" &&
    echo "=====| Update cargo |=====" &&
    cargo install-update -a

  prog_exists npm &&
    echo "---------------------------" &&
    echo "=====| Update npm |========" &&
    npm update -g --all

  prog_exists yarn &&
    echo "---------------------------" &&
    echo "=====| Update yarn |=======" &&
    yarn global upgrade

  prog_exists nvim-plugins &&
    echo "---------------------------" &&
    echo "=====| Update nvim |=======" &&
    nvim-plugins

  prog_exists addon-updates &&
    echo "---------------------------" &&
    echo "=====| Update addons |=====" &&
    addon-updates

  echo "----| Finished Updates |---"
}

alias yaml2js="python3 -c 'import sys, yaml, json; json.dump(yaml.load(sys.stdin), sys.stdout, indent=4)'"

# signin for 1password
# shellcheck disable=SC2154
op_signin() {
  if [[ -z "$OP_SESSION_my" ]]; then
    export OP_SESSION_my="$(pass 1pass | op signin --account my --raw)"
  else
    eval "$(pass 1pass | op signin --account my --session "$OP_SESSION_my")"
  fi
}

# get op password
# shellcheck disable=SC2181
op_get_pw() {
  [[ -n "$OP_SESSION_my" ]] && op item --cache get "$1" --fields password --session "$OP_SESSION_my"
  [[ $? -ne 0 ]] && op_signin && op_get_pw "$@"
}

# get op specific field
# shellcheck disable=SC2181
op_get_field() {
  [[ -n "$OP_SESSION_my" ]] && op item --cache get "$1" --fields "$2" --session "$OP_SESSION_my"
  [[ $? -ne 0 ]] && op_signin && op_get_field "$@"
}

# get op totp
# shellcheck disable=SC2181
op_get_totp() {
  [[ -n "$OP_SESSION_my" ]] && op item --cache get --otp "$1" --session "$OP_SESSION_my"
  [[ $? -ne 0 ]] && op_signin && op_get_totp "$@"
}

export FZF_DEFAULT_COMMAND="fd -p --type f --hidden --follow --color never --max-results 5000000 \
  --ignore-file ~/ws/my_dotfiles/main/.fdignore"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"

alias dc-pup='docker-compose pull; docker-compose up -d --force-recreate; docker image prune -f'
alias dc-rup='docker-compose up -d --force-recreate; docker image prune -f'
alias dc-up='docker-compose up -d'
alias dc-dw='docker-compose down'
alias pc-pup='podman-compose --no-pod up -d --pull --force-recreate'
alias pc-rup='podman-compose --no-pod up -d --force-recreate'
alias pc-up='podman-compose --no-pod up -d --no-recreate'
alias pc-dw='podman-compose --no-pod down'
alias duflf='sudo duf -only local,fuse'

source "$HOME/personal.aliasrc"
echo "aliases loaded ..."
