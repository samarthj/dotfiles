shell = "zsh"

[plugins.zsh-defer]
github = 'romkatv/zsh-defer'

[plugins.oh-my-zsh]
apply = ["omz_init", "source"]
github = 'ohmyzsh/ohmyzsh'

# [plugins.enhancd]
# apply = ["defer"]
# github = 'b4b4r07/enhancd'

[plugins.fzf]
apply = ["source","fzf_post"]
github = 'junegunn/fzf'

[plugins.fzf-zsh-completions]
apply = ["defer"]
github = 'chitoku-k/fzf-zsh-completions'

[plugins.zsh-fzf-pass]
apply = ["defer"]
github = 'smeagol74/zsh-fzf-pass'

# [plugins.my-fzf-completions]
# apply = ["defer"]
# local = '~/.config/fzf/completions'

# [plugins.fzf-git]
# apply = ["defer"]
# remote = "https://github.com/junegunn/fzf-git.sh/raw/main/fzf-git.sh"

# [plugins.blackbox]
# apply = ["defer"]
# github = "StackExchange/blackbox"

[plugins.zoxide]
apply = ["source", "zoxide_post"]
github = "ajeetdsouza/zoxide"

# [plugins.zsh-completions]
# apply = ["defer"]
# github = 'zsh-users/zsh-completions'

# [plugins.zsh-interactive-cd]
# apply = ["defer"]
# github = 'changyuheng/zsh-interactive-cd'

[plugins.zsh-autocomplete]
apply = ['zsh_autocomplete_init', 'source', 'zsh_autocomplete_post']
github = 'marlonrichert/zsh-autocomplete'

# [plugins.zsh-autosuggestions]
# apply = ["defer", "zsh_autosuggest_post"]
# github = 'zsh-users/zsh-autosuggestions'
# use = ['{{ name }}.zsh']

[plugins.zsh-syntax-highlighting]
apply = ["defer"]
github = "zsh-users/zsh-syntax-highlighting"

# [plugins.zsh-history-substring-search]
# apply = ['defer', 'zsh_history_substring_search_post']
# github = 'zsh-users/zsh-history-substring-search'

[templates]
defer = "{% for file in files %}zsh-defer -s -z source \"{{ file }}\"\n{% endfor %}"
omz_init = '''
export ZSH="$XDG_DATA_HOME/sheldon/repos/github.com/ohmyzsh/ohmyzsh"
export ZSH_CUSTOM="$ZSH/custom"
'''

fzf_custom = "{% for file in files %}zsh-defer -s -z source \"{{ file }}\"\n{% endfor %}"
fzf_post = '''

export FZF_DEFAULT_OPTS="--height=40% --layout=reverse"

# Split pane when in tmux
export FZF_TMUX_OPTS="-r 50%"

# Maximum results for an fd search
fd_max_results="--max-results=10000"


# Directory completion
# find via fd and show a tree preview
if prog_exists fd; then

  # Use fd for listing path candidates.
  # The first argument to the function ($1) is the base path to start traversal
  _fzf_compgen_path() {
    fd --full-path --hidden --follow \
      $fd_max_results \
      --ignore-file=$HOME/.fdignore \
      . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --full-path --type d --hidden --follow \
      $fd_max_results \
      --ignore-file=$HOME/.fdignore \
      . "$1"
  }

  export FZF_ALT_C_COMMAND="fd --full-path --type d \
  --follow \
  --color=never \
  $fd_max_results \
  --ignore-file=$HOME/.fdignore"

fi

export FZF_ALT_C_OPTS="--preview 'tree -C {} | head -200'"

# ^R (History completion)
# format history results with shfmt & bat if available
if prog_exists bat; then
  export FZF_CTRL_R_OPTS="--ansi \
    --preview 'echo {} | uniq | \
      bat -l=bash -p --pager=never --color=always' \
    --preview-window down:wrap --bind '?:toggle-preview'"
elif prog_exists shfmt && prog_exists bat; then
  export FZF_CTRL_R_OPTS="--ansi \
    --preview 'echo {} | shfmt -i=2 -s | \
      bat -l=bash -p --pager=never --color=always' \
    --preview-window down:wrap --bind '?:toggle-preview'"
elif prog_exists bat; then
  export FZF_CTRL_R_OPTS="--ansi \
    --preview 'echo {} | \
      bat -l=bash -p --pager=never --color=always' \
    --preview-window down:wrap --bind '?:toggle-preview'"
else
  export FZF_CTRL_R_OPTS="--ansi \
    --preview 'echo {}' \
    --preview-window down:wrap --bind '?:toggle-preview'"
fi

# Context aware fuzzy completion
# export FZF_COMPLETION_TRIGGER=''
# bindkey '^T' fzf-completion
# bindkey '^I' $fzf_default_completion
'''

zoxide_post = '''
export _ZO_RESOLVE_SYMLINKS=1
'''

zsh_autocomplete_init = '''
# https://github.com/marlonrichert/zsh-autocomplete/blob/main/.zshrc
zstyle ':autocomplete:*' default-context ''
# '': Start each new command line with normal autocompletion.
# history-incremental-search-backward: Start in live history search mode.

zstyle ':autocomplete:*' min-delay 0.10  # seconds (float)
# Wait this many seconds for typing to stop, before showing completions.

zstyle ':autocomplete:*' min-input 2  # characters (int)
# Wait until this many characters have been typed, before showing completions.

zstyle ':autocomplete:*' ignored-input '' # extended glob pattern
# '':     Always show completions.
# '..##': Don't show completions for the current word, if it consists of two
#         or more dots.

zstyle ':autocomplete:*' list-lines 16  # int
# If there are fewer than this many lines below the prompt, move the prompt up
# to make room for showing this many lines of completions (approximately).

zstyle ':autocomplete:history-search:*' list-lines 5  # int
# Show this many history lines when pressing ↑.

zstyle ':autocomplete:history-incremental-search-*:*' list-lines 5  # int
# Show this many history lines when pressing ⌃R or ⌃S.

zstyle ':autocomplete:*' insert-unambiguous no
# no:  Tab inserts the top completion.
# yes: Tab first inserts a substring common to all listed completions, if any.

zstyle ':autocomplete:*' fzf-completion yes
# no:  Tab uses Zsh's completion system only.
# yes: Tab first tries Fzf's completion, then falls back to Zsh's.

# Add a space after these completions:
zstyle ':autocomplete:*' add-space \
    executables aliases functions builtins reserved-words commands

zstyle ':autocomplete:recent-dirs' backend zoxide
# cdr:  Use Zsh's `cdr` function to show recent directories as completions.
# no:   Don't show recent directories.
# zsh-z|zoxide|z.lua|z.sh|autojump|fasd: Use this instead (if installed).

zstyle ':autocomplete:*' widget-style menu-select
# complete-word: (Shift-)Tab inserts the top (bottom) completion.
# menu-complete: Press again to cycle to next (previous) completion.
# menu-select:   Same as `menu-complete`, but updates selection in menu.
'''
zsh_autocomplete_post = '''
# Up arrow:
bindkey '\e[A' up-line-or-history
bindkey '\eOA' up-line-or-history
# up-line-or-search:  Open history menu.
# up-line-or-history: Cycle to previous history line.

# Down arrow:
bindkey '\e[B' down-line-or-history
bindkey '\eOB' down-line-or-history
# down-line-or-select:  Open completion menu.
# down-line-or-history: Cycle to next history line.

# Control-Space:
# bindkey '\0' list-expand
# list-expand:      Reveal hidden completions.
# set-mark-command: Activate text selection.

# Uncomment the following lines to disable live history search:
zle -A {.,}history-incremental-search-forward
zle -A {.,}history-incremental-search-backward

# # Return key in completion menu & history menu:
# bindkey -M menuselect '\r' .accept-line
# # .accept-line: Accept command line.
# # accept-line:  Accept selection and exit menu.
'''

zsh_autosuggest_post = '''
(( ! ${+ZSH_AUTOSUGGEST_STRATEGY} )) && {
  typeset -ga ZSH_AUTOSUGGEST_STRATEGY
  ZSH_AUTOSUGGEST_STRATEGY=(history completion)
}

# Widgets that clear the suggestion
(( ! ${+ZSH_AUTOSUGGEST_CLEAR_WIDGETS} )) && {
  typeset -ga ZSH_AUTOSUGGEST_CLEAR_WIDGETS
  ZSH_AUTOSUGGEST_CLEAR_WIDGETS=(
    history-search-forward
    history-search-backward
    history-beginning-search-forward
    history-beginning-search-backward
    history-substring-search-up
    history-substring-search-down
    up-line-or-beginning-search
    down-line-or-beginning-search
    up-line-or-history
    down-line-or-history
    accept-line
    copy-earlier-word
    history-incremental-search-backward
    history-incremental-search-forward
    up-line-or-search
    down-line-or-select
    list-expand
    menuselect
  )
}
'''

zsh_history_substring_search_post = '''
bindkey "^[[A" history-substring-search-up
bindkey "^[[B" history-substring-search-down
bindkey "${terminfo[kcuu1]}" history-substring-search-up
bindkey "${terminfo[kcud1]}" history-substring-search-down
# export HISTORY_SUBSTRING_SEARCH_ENSURE_UNIQUE=1
setopt HIST_IGNORE_ALL_DUPS
'''
